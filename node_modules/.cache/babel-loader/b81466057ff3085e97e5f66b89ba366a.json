{"ast":null,"code":"import _ from 'lodash';\nimport { $Cookies } from './cookies';\nimport { CURRENT_USER, JWT_TOKEN } from './constants';\nimport { $LocalStorage } from './localStorage';\n/**\n * Contains global session.\n */\n\nexport default class Globals {\n  static reset() {\n    this.isInitialized = false;\n    this.session = {\n      public: {},\n      private: {}\n    };\n  }\n\n  static clear() {\n    $Cookies.remove(CURRENT_USER);\n    $Cookies.remove(JWT_TOKEN);\n    $LocalStorage.sls.clear();\n    $LocalStorage.pls.clear();\n    this.session = {\n      public: {},\n      private: {}\n    };\n  }\n\n  static init(session) {\n    if (this.isInitialized) {\n      throw Error('Globals is already initialized.');\n    }\n\n    this.session = session || {\n      public: {},\n      private: {}\n    };\n    this.isInitialized = true;\n  }\n\n  static throwIfNotInitialized() {\n    if (!this.isInitialized) {\n      throw Error(\"'Globals' is not initialized. You have to call 'Globals.init' before.\");\n    }\n  }\n\n  static getSession() {\n    this.throwIfNotInitialized();\n    return this.session;\n  }\n\n  static setSession(session) {\n    this.throwIfNotInitialized(); // Update session object by the new data.\n\n    $Cookies.set(CURRENT_USER, session.public.currentUser);\n    $Cookies.set(JWT_TOKEN, session.private.token);\n    this.session = { ...this.session,\n      ...session\n    };\n  }\n\n  static get currentUser() {\n    const currentSession = this.getSession();\n\n    if (currentSession) {\n      const publicSession = currentSession.public;\n\n      if (publicSession && publicSession.currentUser) {\n        return publicSession.currentUser;\n      }\n\n      return null;\n    }\n\n    return null;\n  }\n\n  static set currentUser(currentUser) {\n    this.setSession({\n      public: {\n        currentUser: JSON.stringify(currentUser)\n      }\n    });\n  }\n\n  static get isAuthenticated() {\n    return !(this.currentUser === null || _.isNaN(this.session.private.token) || _.isNull(this.session.private.token) || _.isUndefined(this.session.private.token));\n  }\n\n}\nGlobals.isInitialized = false;\nGlobals.session = {};","map":{"version":3,"sources":["/Users/dugnt/Documents/upgit/Hotel_reactjs/src/utils/globals.js"],"names":["_","$Cookies","CURRENT_USER","JWT_TOKEN","$LocalStorage","Globals","reset","isInitialized","session","public","private","clear","remove","sls","pls","init","Error","throwIfNotInitialized","getSession","setSession","set","currentUser","token","currentSession","publicSession","JSON","stringify","isAuthenticated","isNaN","isNull","isUndefined"],"mappings":"AAAA,OAAOA,CAAP,MAAc,QAAd;AACA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,YAAT,EAAuBC,SAAvB,QAAwC,aAAxC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AAEA;AACA;AACA;;AACA,eAAe,MAAMC,OAAN,CAAc;AAKf,SAALC,KAAK,GAAG;AACb,SAAKC,aAAL,GAAqB,KAArB;AACA,SAAKC,OAAL,GAAe;AACbC,MAAAA,MAAM,EAAE,EADK;AAEbC,MAAAA,OAAO,EAAE;AAFI,KAAf;AAID;;AAEW,SAALC,KAAK,GAAG;AACbV,IAAAA,QAAQ,CAACW,MAAT,CAAgBV,YAAhB;AACAD,IAAAA,QAAQ,CAACW,MAAT,CAAgBT,SAAhB;AACAC,IAAAA,aAAa,CAACS,GAAd,CAAkBF,KAAlB;AACAP,IAAAA,aAAa,CAACU,GAAd,CAAkBH,KAAlB;AACA,SAAKH,OAAL,GAAe;AACbC,MAAAA,MAAM,EAAE,EADK;AAEbC,MAAAA,OAAO,EAAE;AAFI,KAAf;AAID;;AAEU,SAAJK,IAAI,CAACP,OAAD,EAAU;AACnB,QAAI,KAAKD,aAAT,EAAwB;AACtB,YAAMS,KAAK,CAAC,iCAAD,CAAX;AACD;;AAED,SAAKR,OAAL,GAAeA,OAAO,IAAI;AACxBC,MAAAA,MAAM,EAAE,EADgB;AAExBC,MAAAA,OAAO,EAAE;AAFe,KAA1B;AAKA,SAAKH,aAAL,GAAqB,IAArB;AACD;;AAE2B,SAArBU,qBAAqB,GAAG;AAC7B,QAAI,CAAC,KAAKV,aAAV,EAAyB;AACvB,YAAMS,KAAK,CACT,uEADS,CAAX;AAGD;AACF;;AAEgB,SAAVE,UAAU,GAAG;AAClB,SAAKD,qBAAL;AACA,WAAO,KAAKT,OAAZ;AACD;;AAEgB,SAAVW,UAAU,CAACX,OAAD,EAAU;AACzB,SAAKS,qBAAL,GADyB,CAEzB;;AACAhB,IAAAA,QAAQ,CAACmB,GAAT,CAAalB,YAAb,EAA2BM,OAAO,CAACC,MAAR,CAAeY,WAA1C;AACApB,IAAAA,QAAQ,CAACmB,GAAT,CAAajB,SAAb,EAAwBK,OAAO,CAACE,OAAR,CAAgBY,KAAxC;AACA,SAAKd,OAAL,GAAe,EACb,GAAG,KAAKA,OADK;AAEb,SAAGA;AAFU,KAAf;AAID;;AAEqB,aAAXa,WAAW,GAAG;AACvB,UAAME,cAAc,GAAG,KAAKL,UAAL,EAAvB;;AACA,QAAIK,cAAJ,EAAoB;AAClB,YAAMC,aAAa,GAAGD,cAAc,CAACd,MAArC;;AACA,UAAIe,aAAa,IAAIA,aAAa,CAACH,WAAnC,EAAgD;AAC9C,eAAOG,aAAa,CAACH,WAArB;AACD;;AACD,aAAO,IAAP;AACD;;AACD,WAAO,IAAP;AACD;;AAEqB,aAAXA,WAAW,CAACA,WAAD,EAAc;AAClC,SAAKF,UAAL,CAAgB;AACdV,MAAAA,MAAM,EAAE;AAAEY,QAAAA,WAAW,EAAEI,IAAI,CAACC,SAAL,CAAeL,WAAf;AAAf;AADM,KAAhB;AAGD;;AAEyB,aAAfM,eAAe,GAAG;AAC3B,WAAO,EACL,KAAKN,WAAL,KAAqB,IAArB,IACArB,CAAC,CAAC4B,KAAF,CAAQ,KAAKpB,OAAL,CAAaE,OAAb,CAAqBY,KAA7B,CADA,IAEAtB,CAAC,CAAC6B,MAAF,CAAS,KAAKrB,OAAL,CAAaE,OAAb,CAAqBY,KAA9B,CAFA,IAGAtB,CAAC,CAAC8B,WAAF,CAAc,KAAKtB,OAAL,CAAaE,OAAb,CAAqBY,KAAnC,CAJK,CAAP;AAMD;;AAtF0B;AAARjB,O,CACZE,a,GAAgB,K;AADJF,O,CAGZG,O,GAAU,E","sourcesContent":["import _ from 'lodash';\nimport { $Cookies } from './cookies';\nimport { CURRENT_USER, JWT_TOKEN } from './constants';\nimport { $LocalStorage } from './localStorage';\n\n/**\n * Contains global session.\n */\nexport default class Globals {\n  static isInitialized = false;\n\n  static session = {};\n\n  static reset() {\n    this.isInitialized = false;\n    this.session = {\n      public: {},\n      private: {},\n    };\n  }\n\n  static clear() {\n    $Cookies.remove(CURRENT_USER);\n    $Cookies.remove(JWT_TOKEN);\n    $LocalStorage.sls.clear();\n    $LocalStorage.pls.clear();\n    this.session = {\n      public: {},\n      private: {},\n    };\n  }\n\n  static init(session) {\n    if (this.isInitialized) {\n      throw Error('Globals is already initialized.');\n    }\n\n    this.session = session || {\n      public: {},\n      private: {},\n    };\n\n    this.isInitialized = true;\n  }\n\n  static throwIfNotInitialized() {\n    if (!this.isInitialized) {\n      throw Error(\n        \"'Globals' is not initialized. You have to call 'Globals.init' before.\",\n      );\n    }\n  }\n\n  static getSession() {\n    this.throwIfNotInitialized();\n    return this.session;\n  }\n\n  static setSession(session) {\n    this.throwIfNotInitialized();\n    // Update session object by the new data.\n    $Cookies.set(CURRENT_USER, session.public.currentUser);\n    $Cookies.set(JWT_TOKEN, session.private.token);\n    this.session = {\n      ...this.session,\n      ...session,\n    };\n  }\n\n  static get currentUser() {\n    const currentSession = this.getSession();\n    if (currentSession) {\n      const publicSession = currentSession.public;\n      if (publicSession && publicSession.currentUser) {\n        return publicSession.currentUser;\n      }\n      return null;\n    }\n    return null;\n  }\n\n  static set currentUser(currentUser) {\n    this.setSession({\n      public: { currentUser: JSON.stringify(currentUser) },\n    });\n  }\n\n  static get isAuthenticated() {\n    return !(\n      this.currentUser === null ||\n      _.isNaN(this.session.private.token) ||\n      _.isNull(this.session.private.token) ||\n      _.isUndefined(this.session.private.token)\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}